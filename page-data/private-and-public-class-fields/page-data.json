{"componentChunkName":"component---src-templates-blog-post-js","path":"/private-and-public-class-fields/","webpackCompilationHash":"d0813bbf0216c9d54282","result":{"data":{"site":{"siteMetadata":{"title":"Reactified","author":"Tal Avissar"}},"markdownRemark":{"id":"b72cca70-3c76-5404-809c-113bcd3f2bc9","html":"<p>Several proposals expand the existing JavaScript class syntax with new functionality. This article explains the new public class fields syntax in V8 v7.2 and Chrome 72, as well as the upcoming private class fields syntax.</p>\n<p>Hereâ€™s a code example that creates an instance of a class named IncreasingCounter:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncreasingCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span>value\n<span class=\"token comment\">// logs 'Getting the current value!'</span>\n<span class=\"token comment\">// â†’ 0</span>\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span>value\n<span class=\"token comment\">// logs 'Getting the current value!'</span>\n<span class=\"token comment\">// â†’ 1</span></code></pre></div>\n<p>Note that accessing the value executes some code (i.e., it logs a message) before returning the result. Now ask yourself, how would you implement this class in JavaScript? ðŸ¤”</p>\n<h4>ES2015 class syntax</h4>\n<p>Hereâ€™s how IncreasingCounter could be implemented using ES2015 class syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IncreasingCounter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Getting the current value!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_count\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The _count property is now nicely declared at the top of the class. We no longer need a constructor just to define some fields. Neat!</p>\n<p>However, the _count field is still a public property. In this particular example, we want to prevent people from accessing the property directly.</p>\n<h4>Private class fields</h4>\n<p>Thatâ€™s where private class fields come in. The new private fields syntax is similar to public fields, except <a href=\"https://github.com/tc39/proposal-class-fields/blob/master/PRIVATE_SYNTAX_FAQ.md\">you mark the field as being private by using #</a>. You can think of the # as being part of the field name:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IncreasingCounter</span> <span class=\"token punctuation\">{</span>\n  #count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Getting the current value!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#count\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Private fields are not accessible outside of the class body:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncreasingCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncounter<span class=\"token punctuation\">.</span>#count<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// â†’ SyntaxError</span>\ncounter<span class=\"token punctuation\">.</span>#count <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// â†’ SyntaxError</span></code></pre></div>\n<h4>Public and static properties</h4>\n<p>Class fields syntax can be used to create public and private static properties and methods as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeMath</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// `PI` is a static public property.</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">22</span> <span class=\"token operator\">/</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Close enough.</span>\n\n  <span class=\"token comment\">// `#totallyRandomNumber` is a static private property.</span>\n  <span class=\"token keyword\">static</span> #totallyRandomNumber <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// `#computeRandomNumber` is a static private method.</span>\n  <span class=\"token keyword\">static</span> #<span class=\"token function\">computeRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> FakeMath<span class=\"token punctuation\">.</span>#totallyRandomNumber<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// `random` is a static public method (ES2015 syntax)</span>\n  <span class=\"token comment\">// that consumes `#computeRandomNumber`.</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I heard you like random numbersâ€¦'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> FakeMath<span class=\"token punctuation\">.</span>#<span class=\"token function\">computeRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nFakeMath<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// â†’ 3.142857142857143</span>\nFakeMath<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// logs 'I heard you like random numbersâ€¦'</span>\n<span class=\"token comment\">// â†’ 4</span>\nFakeMath<span class=\"token punctuation\">.</span>#totallyRandomNumber<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// â†’ SyntaxError</span>\nFakeMath<span class=\"token punctuation\">.</span>#<span class=\"token function\">computeRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// â†’ SyntaxError</span></code></pre></div>\n<h4>Simpler subclassing</h4>\n<p>The benefits of the class fields syntax become even clearer when dealing with subclasses that introduce additional fields.\nImagine the following base class Animal:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To create a <code class=\"language-text\">Cat</code> subclass that introduces an additional instance property,\nyouâ€™d previously have to call super() to run the constructor of the <code class=\"language-text\">Animal</code> base class before creating the property:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>likesBaths <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">meow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thatâ€™s a lot of boilerplate just to indicate that cats donâ€™t enjoy taking baths.\nLuckily, the class fields syntax removes the need for the whole constructor, including the awkward <code class=\"language-text\">super()</code> call:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  likesBaths <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token function\">meow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Conclusion</h4>\n<p>Public class fields are shipping in V8 v7.2 and Chrome 72.</p>","timeToRead":3,"frontmatter":{"title":"Public and private class fields","date":"December 25, 2018","spoiler":"new private public fields is coming in v8"},"fields":{"slug":"/private-and-public-class-fields/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/private-and-public-class-fields/","previous":{"fields":{"slug":"/how-does-react-tell-a-class-from-a-function/","langKey":"en","directoryName":"pages"},"frontmatter":{"title":"How Does React Tell a Class from a Function?"}},"next":{"fields":{"slug":"/how-does-the-event-loop-works/","langKey":"en","directoryName":"pages"},"frontmatter":{"title":"Tasks, microtasks and queues"}},"translations":[],"translatedLinks":[]}}}